* Jake Herrmann project diary
** Fri Feb 8 2019
*** 3:30 pm - 4:30 pm (in class)
- Read the articles linked in the assignment description.
- Brainstormed user stories.
- Had a conversation about each story from the perspective of both project
  owners / players and developers.
- Prioritized the user stories (as project owners).
** Sun Feb 10 2019
*** 10:50 am - 11:55 am
- Set up a GitHub repo for the project.
- Recorded our prioritized user stories to the README.
- Found my family's Battleship game and reviewed the rules.
*** 12:10 pm - 12:25 pm
- Revised some user stories.
*** Afternoon and evening
- We agreed on difficulty ratings over Slack. Oddly enough, we only used 1 and
  8 hr. ratings. I'm guessing some of the 1 hr. items might become 2 or 4 hours
  realistically, when you account for writing tests, refactoring, etc.
- We also agreed on an initial design based on our higher priority user
  stories.
** Mon Feb 11 2019
*** 12:50 pm - 1:05 pm
- We met on campus to further discuss the initial design and presentation.
** Thu Feb 14 2019
*** 1:00 pm - 2:00 pm
We met on campus and discussed the initial design in greater detail. First we
discussed which languages and technologies we should use. We decided that in
order to leave open the possibility of converting our game to a web app (if we
make it that far), the best choice for the backend would be Python because it
is an easy language to use for server-side scripting. The frontend would be the
usual JavaScript/HTML/CSS. Python is also a good choice because I already know
Python and Jonathan was already planning to learn it soon.

Then we started discussing how to implement the core game logic. Some ideas we
came up with:

- ship objects, each storing:
  - location (as coordinates?)
  - name
  - length? (perhaps unnecessary)
  - which holes have been hit
- sorted sequence of hits & misses (red and white pegs)
- use artificial/contrived (what is correct terminology?) games to test
  functionality such as winning & losing when appropriate
  
We tried to avoid getting carried away planning out every detail and instead
concentrated on the big picture of the game logic. We also tried to consider
what would be the minimum functionality that we could test for the first few
user stories. For example, for the first two user stories, we decided we could
probably just test whether ship objects can be constructed with given location,
name, and length.

One thing I'm thinking about is how the initial planning stage of this (or any)
project relates to TDD. Perhaps we're thinking too far ahead as far as TDD is
concerned. On the other hand, I would feel uncomfortable if we didn't at least
have a rough idea of the big picture, to ensure that we're not coding ourselves
into a corner. I also feel like part of software development is just developing
the experience and instincts necessary to immediately recognize problematic
design and potential dead-end and time-wasting decisions. But I don't feel like
I've worked on enough big projects (not that this is a very big project) to
have developed those instincts yet.
** Sat Feb 16
*** 2:15 pm - 3:45 pm
We met for our first pair programming session. We didn't finish the first user
story, which we estimated would take 1 hour, so we're moving at a slower
velocity than anticipated (which is fine). I do think pair programming felt
slower than working by myself, just because it involves physically talking to
another person and agreeing on design decisions, which is slower than just
translating my own thoughts into code. I also wouldn't necessarily say the code
came out better than it would have had either of us been working alone.
However, it was not a negative experience, and we didn't have any difficulty
agreeing on what tests to write or how to make them pass.

I am enjoying practicing TDD and I find that it does help create cleaner, more
concise code that only does exactly what it's supposed to, because TDD doesn't
allow you to prematurely generalize any piece of code.

Attempting to write clean note, particularly using proper variable names, as
well as using version control, are not new to me, so I don't have much to say
about those topics; except that I like that TDD is teaching me to commit more
frequently.
** Thu Feb 21
*** 1:15 pm - 4:30 pm
We met for our second pair programming session and finished our first user
story. I believe we've pair programmed for 4 hr 45 min so far and we had only
estimated the first user story would take 1 hour. So we are clearly far behind
our projected velocity. But I am hopeful that we will start to speed up now
that the initial design is starting to take shape.

Having comprehensive tests is very nice because it has already allowed us to
refactor to make the code much cleaner, e.g. by renaming variables and
extracting helper functions. One thing I've wondered about is whether we are
supposed to write a unit test for literally every single function or method.
Sometimes this seems pointless, e.g. if we just want to write a very small
helper method that will only be used as part of another method that already has
a unit test. In these cases, we have tended toward not writing tests when they
seem totally useless.

Another thing I'm not sure about is whether we are supposed to calculate the
total time we've worked (for the purpose of calculating project velocity) by
calculating the total time we've spent pair programming (4 hr 45 min), or by
calculating the total time /each/ of us has spent on the project (which would
be 4 hr 45 min each, so 9 hr 30 min total).
** Fri Feb 22
*** 3:25 pm - 4:35 pm
We did a mix of pair programming and just working side-by-side, so we could
consult with each other on design decisions, technical difficulties, etc. We
finished the third user story and added tests for the second; Jonathan was
working on the second while I worked on the third, but he was having some
issues with getting a Python IDE set up, since he is still learning Python.

I think development is going more quickly now that the first user story is done
and we have a better idea of how the game will work. We've now been pair
programming for about 5 hr 45 min and have finished 2.5 user stories, giving us
a project velocity of about 0.44 user stories / hour. Given that each of the
user stories we've worked on so far has been estimated at 1 hr, and all of the
upcoming ones are also estimated at 1 hr, we are behind our expected velocity.
I don't think we will make up all of the difference, but looking ahead I am
hopeful that some of the remaining user stories could take less than an hour,
which would help make up some of the difference.
