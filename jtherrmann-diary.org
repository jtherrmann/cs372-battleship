* Jake Herrmann project diary
** Fri Feb 8 2019
*** 3:30 pm - 4:30 pm (in class)
- Read the articles linked in the assignment description.
- Brainstormed user stories.
- Had a conversation about each story from the perspective of both project
  owners / players and developers.
- Prioritized the user stories (as project owners).
** Sun Feb 10 2019
*** 10:50 am - 11:55 am
- Set up a GitHub repo for the project.
- Recorded our prioritized user stories to the README.
- Found my family's Battleship game and reviewed the rules.
*** 12:10 pm - 12:25 pm
- Revised some user stories.
*** Afternoon and evening
- We agreed on difficulty ratings over Slack. Oddly enough, we only used 1 and
  8 hr. ratings. I'm guessing some of the 1 hr. items might become 2 or 4 hours
  realistically, when you account for writing tests, refactoring, etc.
- We also agreed on an initial design based on our higher priority user
  stories.
** Mon Feb 11 2019
*** 12:50 pm - 1:05 pm
- We met on campus to further discuss the initial design and presentation.
** Thu Feb 14 2019
*** 1:00 pm - 2:00 pm
We met on campus and discussed the initial design in greater detail. First we
discussed which languages and technologies we should use. We decided that in
order to leave open the possibility of converting our game to a web app (if we
make it that far), the best choice for the backend would be Python because it
is an easy language to use for server-side scripting. The frontend would be the
usual JavaScript/HTML/CSS. Python is also a good choice because I already know
Python and Jonathan was already planning to learn it soon.

Then we started discussing how to implement the core game logic. Some ideas we
came up with:

- ship objects, each storing:
  - location (as coordinates?)
  - name
  - length? (perhaps unnecessary)
  - which holes have been hit
- sorted sequence of hits & misses (red and white pegs)
- use artificial/contrived (what is correct terminology?) games to test
  functionality such as winning & losing when appropriate
  
We tried to avoid getting carried away planning out every detail and instead
concentrated on the big picture of the game logic. We also tried to consider
what would be the minimum functionality that we could test for the first few
user stories. For example, for the first two user stories, we decided we could
probably just test whether ship objects can be constructed with given location,
name, and length.

One thing I'm thinking about is how the initial planning stage of this (or any)
project relates to TDD. Perhaps we're thinking too far ahead as far as TDD is
concerned. On the other hand, I would feel uncomfortable if we didn't at least
have a rough idea of the big picture, to ensure that we're not coding ourselves
into a corner. I also feel like part of software development is just developing
the experience and instincts necessary to immediately recognize problematic
design and potential dead-end and time-wasting decisions. But I don't feel like
I've worked on enough big projects (not that this is a very big project) to
have developed those instincts yet.
